/**
 * Programme l'envoi d'un message dans un salon Discord avec rappels, tous les jours √† la m√™me heure.
 * @param {Client} client - L'instance du bot Discord
 * @param {string} channelId - L'ID du salon o√π envoyer le message
 * @param {string} userId - L'ID de la personne √† mentionner
 * @param {string} messageText - Le message personnalis√©
 * @param {number} hour - Heure du jour pour envoyer le message (0-23)
 * @param {number} minute - Minute de l'heure (0-59)
 */
function sendMessage(client, channelId, userId, messageText, hour, minute) {

  async function scheduleNextMessage() {
    try {
      const now = new Date();
      let sendTime = new Date();
      sendTime.setHours(hour, minute, 0, 0);

      // Si l'heure est d√©j√† pass√©e, on programme pour demain
      if (sendTime <= now) {
        sendTime.setDate(sendTime.getDate() + 1);
      }

      const delay = sendTime.getTime() - now.getTime();
      console.log(`üìÖ Message programm√© pour ${sendTime.toLocaleString()}`);

      setTimeout(async () => {
        try {
          const channel = await client.channels.fetch(channelId);
          if (!channel) {
            console.error("Salon introuvable !");
            return;
          }

          // Premier envoi
          await channel.send(`<@${userId}> ${messageText}`);
          console.log(`‚úÖ Premier message envoy√© √† <@${userId}> dans #${channel.name}`);

          // Flag pour savoir si la personne a r√©pondu
          let userReplied = false;

          const messageListener = (msg) => {
            if (msg.author.id === userId && msg.mentions.has(client.user.id)) {
              console.log(`‚úÖ R√©ponse re√ßue de <@${userId}> : rappel arr√™t√©`);
              userReplied = true;
              client.off("messageCreate", messageListener);
            }
          };

          client.on("messageCreate", messageListener);

          // Rappels toutes les 30 min tant que pas de r√©ponse
          const reminderInterval = setInterval(async () => {
            if (userReplied) {
              clearInterval(reminderInterval);
              return;
            }
            await channel.send(`<@${userId}> ‚è∞ Petit rappel : ${messageText}`);
            console.log(`üîÑ Rappel envoy√© √† <@${userId}>`);
          }, 30 * 60 * 1000);

          // Reprogrammer automatiquement pour le lendemain
          scheduleNextMessage();

        } catch (err) {
          console.error("‚ùå Erreur lors de l'envoi du message :", err.message);
        }
      }, delay);

    } catch (err) {
      console.error("‚ùå Erreur dans sendMessageDaily :", err.message);
    }
  }

  // Lancer la premi√®re planification
  scheduleNextMessage();
}

module.exports = { sendMessage };
